output$Test_Titan  <- DT::renderDataTable("www/Titan_test.csv", server = TRUE, options=list(scrollX=TRUE))
output$downloadTrainTitan <- downloadHandler(filename = function(){"trainning_set.csv"},
content = function(file){file.copy("www/Titan_train.csv",file)}) #work fine in browser, dont' worry
output$downloadTestTitan  <- downloadHandler(filename = function(){"test_set.csv"},
content = function(file){file.copy("www/Titan_test.csv")})
}
runApp()
runApp()
runApp()
runApp()
train
print(head(train))
train <- fread("Titan_train.csv")
train <- fread("www/Titan_train.csv")
#get title from name collumn
# get character between , and .
train[,"Name"] <- sapply(train[,"Name", with = FALSE],  FUN =function(x) stringr::str_match(x, paste("\\,.*?\\.",sep=""))[,-2]) %>%
data.table()
#remove  ,
train[,"Name"] <- sapply(train[,"Name", with = FALSE],  FUN =function(x) stringr::str_replace(x, "[\\W]" , " ")) %>%
data.table()
print(head(train))
save(train, file = "www/train_titanic.rda")
load(file = "www/train_titanic.rda")
runApp()
sapply(train[,.(SibSp,Age,Parch,Fare)], function(x) as.numeric())
library(caret)
library(MASS)
library(plyr)
library(dplyr)
library(utils)
library(data.table)
library(doParallel)
library(pROC)
library(stringr)
#get title from name collumn http://www.txt2re.com/index-python.php3?s=%2C+Mr.&submit=Show+Matches
# get character between , and .
train[,"Name"] <- sapply(train[,"Name", with = FALSE],  FUN =function(x) stringr::str_match(x, paste("\\,.*?\\.",sep=""))[,-2]) %>%
data.table()
#remove  ,
train[,"Name"] <- sapply(train[,"Name", with = FALSE],  FUN =function(x) stringr::str_replace(x, "[\\W]" , " ")) %>%
data.table()
```
```{r, echo=TRUE}
# Using k-neighbor network to fill out empty values
preProcess<- preProcess(x = train[,c("Age", "Fare"), with = FALSE],
method = "knnImpute",
na.remove = TRUE,
k = 5,
knnSummary = mean,
outcome = NULL,
fudge = .2,
numUnique = 3)
train[,c("Age","Fare")] <- predict(preProcess, train[,c("Age","Fare"),with = FALSE])
#remove id table , ticket and cabin
train[,c("PassengerId" ,"Ticket" ,"Cabin"):= NULL]
#set collum types
train$Survived <- factor(ifelse(train$Survived == 1, "y", "n"))
train$Pclass <- ordered(train$Pclass, levels = 1:3)
train$Sex <- factor(ifelse(train$Sex == "male", "1", "0"))
sapply(train[,.(SibSp,Age,Parch,Fare)], function(x) as.numeric())
train$Embarked <- factor(train$Embarked, ordered = FALSE)
#split trainning set 70:30 ratio
set.seed(1234)
splitindex <- createDataPartition(train$Survived,
p = 0.7,
list = FALSE)
train_set <- train[splitindex,]
valid_set <- train[-splitindex,]
(train[,.(SibSp,Age,Parch,Fare)]
)
View(train)
train[5:8]
train[,5:8]
sapply(train[,.(SibSp,Age,Parch,Fare)], function(x) as.numeric())
class(train)
train[,.(PassengerId ,Ticket ,Cabin)]
# get character between , and .
train[,"Name"] <- sapply(train[,"Name", with = FALSE],  FUN =function(x) stringr::str_match(x, paste("\\,.*?\\.",sep=""))[,-2]) %>%
data.table()
#remove  ,
train[,"Name"] <- sapply(train[,"Name", with = FALSE],  FUN =function(x) stringr::str_replace(x, "[\\W]" , " ")) %>%
data.table()
```
```{r, echo=TRUE}
# Using k-neighbor network to fill out empty values
preProcess<- preProcess(x = train[,c("Age", "Fare"), with = FALSE],
method = "knnImpute",
na.remove = TRUE,
k = 5,
knnSummary = mean,
outcome = NULL,
fudge = .2,
numUnique = 3)
train[,c("Age","Fare")] <- predict(preProcess, train[,c("Age","Fare"),with = FALSE])
train[,.(PassengerId ,Ticket ,Cabin)]<- NULL
train[,c("PassengerId" ,"Ticket" ,"Cabin"):= NULL]
train[,"Name"] <- sapply(train[,"Name", with = FALSE],  FUN =function(x) stringr::str_match(x, paste("\\,.*?\\.",sep=""))[,-2]) %>%
data.table()
train[,"Name"] <- sapply(train[,"Name", with = FALSE],  FUN =function(x) stringr::str_replace(x, "[\\W]" , " ")) %>%
data.table()
runApp()
#set up train control
control <- trainControl(method = "cv",
repeats = 3,
number = 10,
verboseIter = TRUE,
savePredictions = TRUE,
summaryFunction = twoClassSummary,
classProbs = TRUE,
allowParallel = TRUE)
#create model
#set time
ptm <- proc.time()
set.seed(1234)
#parrallel
cl <- makeCluster(detectCores())
registerDoParallel(cl)
#establish model
model <- caret::train(data = train_set,
Survived~.,
method = "rf",
preProcess = c("center","scale","pca"),
na.action = na.omit,
metric = "ROC",
trControl = control,
verbose = TRUE,
size = 3,
tuneLength = 5)
#summary model
summary(model)
View(train_set)
library(caret)
library(MASS)
library(plyr)
library(dplyr)
library(utils)
library(data.table)
library(doParallel)
library(pROC)
library(stringr)
#load file
train <- fread("F:/R/Titanic/Titan_train.csv")
#class
class(train)
#check missing data
sum(is.na(train))
#check which collumn has missing data
missing <- sapply(train,function(x)sum(is.na(x))) %>%
data.table()
#get title from name collumn http://www.txt2re.com/index-python.php3?s=%2C+Mr.&submit=Show+Matches
# get character between , and .
train[,"Name"] <- sapply(train[,"Name", with = FALSE],  FUN =function(x) stringr::str_match(x, paste("\\,.*?\\.",sep=""))[,-2]) %>%
data.table()
#remove  ,
train[,"Name"] <- sapply(train[,"Name", with = FALSE],  FUN =function(x) stringr::str_replace(x, "[\\W]" , " ")) %>%
data.table()
preProcess<- preProcess(x = train[,c("Age", "Fare"), with = FALSE],
method = "knnImpute",
na.remove = TRUE,
k = 5,
knnSummary = mean,
outcome = NULL,
fudge = .2,
numUnique = 3)
train[,c("Age","Fare")] <- predict(preProcess,
train[,c("Age","Fare"),
with = FALSE])
#remove id table , ticket and cabin and Name
train[,c("PassengerId" ,"Ticket" ,"Cabin"):= NULL]
#set collum types
train$Survived <- factor(ifelse(train$Survived == 1, "y", "n"))
train$Pclass <- ordered(train$Pclass, levels = 1:3)
train$Sex <- factor(ifelse(train$Sex == "male", "1", "0"))
sapply(train[,.(SibSp,Age,Parch,Fare)], function(x) as.numeric())
train$Embarked <- factor(train$Embarked, ordered = FALSE)
train$Name <- factor(train$Name, ordered = FALSE)
#split trainning set 70:30 ratio
set.seed(1234)
splitindex <- createDataPartition(train$Survived,
p = 0.7,
list = FALSE)
train_set <- train[splitindex,]
valid_set <- train[-splitindex,]
View(train_set)
#set up train control
control <- trainControl(method = "cv",
repeats = 3,
number = 10,
verboseIter = TRUE,
savePredictions = TRUE,
summaryFunction = twoClassSummary,
classProbs = TRUE,
allowParallel = TRUE)
#create model
#set time
ptm <- proc.time()
set.seed(1234)
#parrallel
cl <- makeCluster(detectCores())
registerDoParallel(cl)
#establish model
model <- caret::train(data = train_set,
Survived~.,
method = "rf",
preProcess = c("center","scale","pca"),
na.action = na.omit,
metric = "ROC",
trControl = control,
verbose = TRUE,
size = 3,
tuneLength = 5)
rm(list=ls())
model <- caret::train(data = train_set,
Survived~.,
method = "rf",
preProcess = c("center","scale","pca"),
na.action = na.omit,
metric = "ROC",
trControl = control,
verbose = TRUE,
size = 3,
tuneLength = 5)
library(caret)
library(MASS)
library(plyr)
library(dplyr)
library(utils)
library(data.table)
library(doParallel)
library(pROC)
library(stringr)
#load file
train <- fread("Titan_train.csv")
#class
class(train)
#check missing data
sum(is.na(train))
#check which collumn has missing data
missing <- sapply(train,function(x)sum(is.na(x))) %>%
data.table()
#get title from name collumn http://www.txt2re.com/index-python.php3?s=%2C+Mr.&submit=Show+Matches
# get character between , and .
train[,"Name"] <- sapply(train[,"Name", with = FALSE],  FUN =function(x) stringr::str_match(x, paste("\\,.*?\\.",sep=""))[,-2]) %>%
data.table()
#remove  ,
train[,"Name"] <- sapply(train[,"Name", with = FALSE],  FUN =function(x) stringr::str_replace(x, "[\\W]" , " ")) %>%
data.table()
preProcess<- preProcess(x = train[,c("Age", "Fare"), with = FALSE],
method = "knnImpute",
na.remove = TRUE,
k = 5,
knnSummary = mean,
outcome = NULL,
fudge = .2,
numUnique = 3)
train[,c("Age","Fare")] <- predict(preProcess,
train[,c("Age","Fare"),
with = FALSE])
#remove id table , ticket and cabin and Name
train[,c("PassengerId" ,"Ticket" ,"Cabin"):= NULL]
#set collum types
train$Survived <- factor(ifelse(train$Survived == 1, "y", "n"))
train$Pclass <- ordered(train$Pclass, levels = 1:3)
train$Sex <- factor(ifelse(train$Sex == "male", "1", "0"))
sapply(train[,.(SibSp,Age,Parch,Fare)], function(x) as.numeric())
train$Embarked <- factor(train$Embarked, ordered = FALSE)
train$Name <- factor(train$Name, ordered = FALSE)
#split trainning set 70:30 ratio
set.seed(1234)
splitindex <- createDataPartition(train$Survived,
p = 0.7,
list = FALSE)
train_set <- train[splitindex,]
valid_set <- train[-splitindex,]
```
```{r, echo=TRUE}
#set up train control
control <- trainControl(method = "cv",
repeats = 3,
number = 10,
verboseIter = TRUE,
savePredictions = TRUE,
summaryFunction = twoClassSummary,
classProbs = TRUE,
allowParallel = TRUE)
#create model
#set time
ptm <- proc.time()
set.seed(1234)
#parrallel
cl <- makeCluster(detectCores())
registerDoParallel(cl)
#establish model
model <- caret::train(data = train_set,
Survived~.,
method = "rf",
preProcess = c("center","scale","pca"),
na.action = na.omit,
metric = "ROC",
trControl = control,
verbose = TRUE,
size = 3,
tuneLength = 5)
#summary model
summary(model)
train <- fread("Titan_train.csv")
#load file
train <- fread("www/Titan_train.csv")
#class
class(train)
#check missing data
sum(is.na(train))
#check which collumn has missing data
missing <- sapply(train,function(x)sum(is.na(x))) %>%
data.table()
#get title from name collumn http://www.txt2re.com/index-python.php3?s=%2C+Mr.&submit=Show+Matches
# get character between , and .
train[,"Name"] <- sapply(train[,"Name", with = FALSE],  FUN =function(x) stringr::str_match(x, paste("\\,.*?\\.",sep=""))[,-2]) %>%
data.table()
#remove  ,
train[,"Name"] <- sapply(train[,"Name", with = FALSE],  FUN =function(x) stringr::str_replace(x, "[\\W]" , " ")) %>%
data.table()
preProcess<- preProcess(x = train[,c("Age", "Fare"), with = FALSE],
method = "knnImpute",
na.remove = TRUE,
k = 5,
knnSummary = mean,
outcome = NULL,
fudge = .2,
numUnique = 3)
train[,c("Age","Fare")] <- predict(preProcess,
train[,c("Age","Fare"),
with = FALSE])
#remove id table , ticket and cabin and Name
train[,c("PassengerId" ,"Ticket" ,"Cabin"):= NULL]
#set collum types
train$Survived <- factor(ifelse(train$Survived == 1, "y", "n"))
train$Pclass <- ordered(train$Pclass, levels = 1:3)
train$Sex <- factor(ifelse(train$Sex == "male", "1", "0"))
sapply(train[,.(SibSp,Age,Parch,Fare)], function(x) as.numeric())
train$Embarked <- factor(train$Embarked, ordered = FALSE)
train$Name <- factor(train$Name, ordered = FALSE)
#split trainning set 70:30 ratio
set.seed(1234)
splitindex <- createDataPartition(train$Survived,
p = 0.7,
list = FALSE)
train_set <- train[splitindex,]
valid_set <- train[-splitindex,]
control <- trainControl(method = "cv",
repeats = 3,
number = 10,
verboseIter = TRUE,
savePredictions = TRUE,
summaryFunction = twoClassSummary,
classProbs = TRUE,
allowParallel = TRUE)
#create model
#set time
ptm <- proc.time()
set.seed(1234)
#parrallel
cl <- makeCluster(detectCores())
registerDoParallel(cl)
#establish model
model <- caret::train(data = train_set,
Survived~.,
method = "rf",
preProcess = c("center","scale","pca"),
na.action = na.omit,
metric = "ROC",
trControl = control,
verbose = TRUE,
size = 3,
tuneLength = 5)
#summary model
summary(model)
View(train_set)
View(valid_set)
load(file = "model_Titanic.Rda")
runApp()
runApp()
library(ggplot2)
library(pROC)
load(file = "logit_hand_picked.Rda")
load(file = "glmboost.Rda")
load(file = "rf.Rda")
load(file = "auto_valid_set.Rda")
load(file = "manual_valid_set.Rda")
```{r, include=FALSE}
library(ggplot2)
library(pROC)
load(file = "www/logit_hand_picked.Rda")
load(file = "www/glmboost.Rda")
load(file = "www/rf.Rda")
load(file = "www/auto_valid_set.Rda")
load(file = "www/manual_valid_set.Rda")
```
logit_hand_picked_prob <- predict(logit_hand_picked,newdata = manual_valid_set, type ="prob")
logit_hand_picked_pred <- factor(ifelse(logit_hand_picked_prob[,"y"] > 0.5,"y","n"))
logit_hand_picked_rocCurve <- roc(response = manual_valid_set$mobile_home_insurance,
predictor = logit_hand_picked_prob[,"y"],
levels = levels(manual_valid_set$mobile_home_insurance))
logit_hand_picked_curve <- plot(logit_hand_picked_rocCurve, print.thres = c(.5), type = "S",
print.thres.pattern = "%.3f (Spec = %.2f, Sens = %.2f)",
print.thres.cex = .8,
legacy.axes = TRUE)
logit_hand_picked_curve$auc
```
glmboost_prob <- predict(glmboost,newdata = auto_valid_set, type ="prob")
glmboost_pred <- factor(ifelse(glmboost_prob[,"y"] > 0.5,"y","n"))
```
```{r, echo=TRUE, message=FALSE}
glmboost_rocCurve <- roc(response = auto_valid_set$mobile_home_insurance,
predictor = glmboost_prob[,"y"],
levels = levels(auto_valid_set$mobile_home_insurance))
glmboost_curve <- plot(glmboost_rocCurve, print.thres = c(.5), type = "S",
print.thres.pattern = "%.3f (Spec = %.2f, Sens = %.2f)",
print.thres.cex = .8,
legacy.axes = TRUE)
glmboost_curve$auc
rf_prob <- predict(rf,newdata = auto_valid_set, type ="prob")
rf_pred <- factor(ifelse(rf_prob[,"y"] > 0.5,"y","n"))
```
```{r, echo=TRUE, message=FALSE}
rf_rocCurve <- roc(response = auto_valid_set$mobile_home_insurance,
predictor = rf_prob[,"y"],
levels = levels(auto_valid_set$mobile_home_insurance))
rf_curve <- plot(rf_rocCurve, print.thres = c(.5), type = "S",
print.thres.pattern = "%.3f (Spec = %.2f, Sens = %.2f)",
print.thres.cex = .8,
legacy.axes = TRUE)
rf_curve$auc
test <- list(rf_curve$auc,glmboost_curve$auc,logit_hand_picked_curve$auc)
test
ggplot(test)
summary(test)
bwplot(test)
test <-data.frame(test)
View(test)
boxplot(test)
test <- data.frame(rf_curve$auc,glmboost_curve$auc,logit_hand_picked_curve$auc)
View(test)
ggplot(compare)
compare <- data.frame(rf_curve$auc,glmboost_curve$auc,logit_hand_picked_curve$auc)
ggplot(compare)
ggplot(compare) + geom_bar()
ggplot(compare) + geom_bar(stat = "identity")
View(compare)
ggplot(compare, aes(x=rf_curve.auc)) + geom_bar(stat = "identity")
ggplot(compare, aes(x=rf_curve.auc, y = glmboost_curve.auc)) + geom_bar(stat = "identity")
compare <- data.frame(rf_curve$auc,glmboost_curve$auc,logit_hand_picked_curve$auc) %>%
t()
View(compare)
compare <- rbind.data.frame(rf_curve$auc,glmboost_curve$auc,logit_hand_picked_curve$auc)
View(compare)
compare <- rbind(rf_curve$auc,glmboost_curve$auc,logit_hand_picked_curve$auc)
View(compare)
compare <- cbind(rf_curve$auc,glmboost_curve$auc,logit_hand_picked_curve$auc)
View(compare)
compare <- cbind.data.frame(rf_curve$auc,glmboost_curve$auc,logit_hand_picked_curve$auc)
View(compare)
boxplot(compare)
?boxplot
boxplot(compare)
library(reshape2)
?melt
melt(compare)
View(compare)
compare <- cbind.data.frame(rf_curve$auc,glmboost_curve$auc,logit_hand_picked_curve$auc) %>%
compare <- melt(compare)
View(compare)
compare <- cbind.data.frame(rf_curve$auc,glmboost_curve$auc,logit_hand_picked_curve$auc)
compare <- melt(compare)
View(compare)
ggplot(compare, aes(x=variable, y = value)) + geom_bar(stat = "identity", color = value)
ggplot(compare, aes(x=variable, y = value)) + geom_bar(stat = "identity")
ggplot(compare, aes(x=variable, y = value,fill=value)) + geom_bar(stat = "identity")
?geom_text
ggplot(compare, aes(x=variable, y = value,fill=value, label = value)) + geom_bar(stat = "identity")
ggplot(compare, aes(x=variable, y = value, label = value)) + geom_bar(stat = "identity")
ggplot(compare, aes(x=variable, y = value,fill=value)) + geom_bar(stat = "identity")
compare <- cbind.data.frame(rf_curve$auc,glmboost_curve$auc,logit_hand_picked_curve$auc)
compare <- melt(compare)
colnames(compare$variable) <- "Models"
colnames(compare$value)    <- "AUC_Score"
ggplot(compare, aes(x=Models, y = AUC_Score,fill=AUC_Score)) + geom_bar(stat = "identity")
colnames(compare$variable)
compare <- cbind.data.frame(rf_curve$auc,glmboost_curve$auc,logit_hand_picked_curve$auc)
compare <- melt(compare)
colnames(compare$variable
)
colnames(compare[1]) <- "Models"
colnames(compare$value)    <- "AUC_Score"
colnames(compare[2])    <- "AUC_Score"
View(compare)
colnames(compare)
compare <- cbind.data.frame(rf_curve$auc,glmboost_curve$auc,logit_hand_picked_curve$auc)
compare <- melt(compare)
colnames(compare)[1] <- "Models"
colnames(compare)[2]    <- "AUC_Score"
View(compare)
ggplot(compare, aes(x=Models, y = AUC_Score,fill=AUC_Score)) + geom_bar(stat = "identity")
ggplot(compare, aes(x=Models, y = AUC_Score,fill=AUC_Score)) + geom_bar(stat = "identity", width = 4)
ggplot(compare, aes(x=Models, y = AUC_Score,fill=AUC_Score)) + geom_bar(stat = "identity", width = 1)
ggplot(compare, aes(x=Models, y = AUC_Score,fill=AUC_Score)) + geom_bar(stat = "identity", width = 0.4)
runApp()
runApp()
runApp()
runApp()
runApp()
